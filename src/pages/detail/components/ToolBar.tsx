import {
  getToolDisplayName,
  getToolInstructions,
  type ToolName,
} from "./Tooling";

type Props = {
  isInitialized: boolean;
  activeTool: string;
  onSwitch: (tool: ToolName | string) => void;
  annotationColor: string;
  onColorChange: (color: string) => void;
  showBasic?: boolean;
  showColor?: boolean;
  onToggleImagePair?: () => void;
};

export default function ToolBar({
  isInitialized,
  activeTool,
  onSwitch,
  annotationColor,
  onColorChange,
  showBasic = true,
  showColor = true,
  onToggleImagePair,
}: Props) {
  if (!isInitialized) return null;

  const ToolButton = ({
    name,
    label,
  }: {
    name: ToolName | string;
    label: string;
  }) => (
    <button
      onClick={() => onSwitch(name)}
      className={`px-2 py-1 text-xs rounded transition-all cursor-pointer ${
        activeTool === name
          ? "bg-blue-600 text-white"
          : "bg-gray-600 text-gray-200"
      }`}
    >
      {label}
    </button>
  );

  return (
    <div className="space-y-2 bg-gray-800 px-2">
      <div className="flex items-center gap-2 flex-wrap">
        {showBasic && (
          <>
            <span className="text-xs font-medium text-blue-300 mr-1">
              Âü∫Êú¨:
            </span>
            <ToolButton name="WindowLevel" label="üåÖ Á™ó‰Ωç" />
            <ToolButton name="Pan" label="‚úã Âπ≥Áßª" />
            <ToolButton name="Zoom" label="üîç Áº©Êîæ" />
            <ToolButton name="Probe" label="üîé Êé¢Èíà" />
          </>
        )}

        <span
          className={`text-xs font-medium text-green-300 mr-1 ${
            showBasic ? "ml-3" : ""
          }`}
        >
          ÊµãÈáè:
        </span>
        <ToolButton name="Length" label="üìè ÈïøÂ∫¶" />
        <ToolButton name="Angle" label="üìê ËßíÂ∫¶" />
        <ToolButton name="Bidirectional" label="‚ÜîÔ∏è ÂèåÂêë" />

        <span
          className={`text-xs font-medium text-purple-300 mr-1 ${
            showBasic ? "ml-3" : ""
          }`}
        >
          Ê†áÊ≥®:
        </span>
        <ToolButton name="RectangleROI" label="‚ñ≠ Áü©ÂΩ¢" />
        <ToolButton name="EllipticalROI" label="‚ö¨ Ê§≠ÂúÜ" />
        <ToolButton name="CircleROI" label="‚óØ ÂúÜÂΩ¢" />
        <ToolButton name="PlanarFreehandROI" label="üé® ÁªòÂà∂" />
        <ToolButton name="ArrowAnnotate" label="‚û°Ô∏è ÁÆ≠Â§¥" />
        <ToolButton name="Label" label="üìù ÊñáÂ≠ó" />

        <span
          className={`text-xs font-medium text-red-300 mr-1 ${
            showBasic ? "ml-3" : ""
          }`}
        >
          Êìç‰Ωú:
        </span>
        <ToolButton name="DeleteAnnotation" label="üóëÔ∏è Âà†Èô§" />
        {onToggleImagePair && (
          <button
            onClick={onToggleImagePair}
            className="px-2 py-1 text-xs rounded bg-indigo-600 text-white hover:bg-indigo-700 transition-all cursor-pointer"
          >
            ËΩÆÂªìËØÜÂà´
          </button>
        )}

        {showColor && (
          <>
            <span className="text-yellow-300 text-xs mr-1 ml-3">È¢úËâ≤:</span>
            <div className="flex items-center gap-2">
              <input
                type="color"
                value={annotationColor}
                onChange={(e) => onColorChange(e.target.value)}
                className="w-8 h-8 rounded border-2 border-gray-400 cursor-pointer"
                title="ÈÄâÊã©Ê†áÊ≥®È¢úËâ≤"
              />
            </div>
          </>
        )}
      </div>

      <div className="text-xs text-gray-300 py-1 rounded">
        <span className="text-yellow-300">ÂΩìÂâç:</span>{" "}
        <span className="font-medium">{getToolDisplayName(activeTool)}</span>
        <span className="mx-1 text-gray-500">|</span>
        <span className="text-blue-300">{getToolInstructions(activeTool)}</span>
      </div>
    </div>
  );
}
